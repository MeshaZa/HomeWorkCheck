import vk_api
import random
import time
import requests

token = "613084d1708901a7657805fc0ad2fce1a209e4c09ef047eb81e1e6757bce906b2ecbff8ee005318971d07"

def say(id, mess):
    vk.method("messages.send", {"peer_id": id, "message": mess, "random_id": random.randint(1, 2147483647)})

def add(sub, what):
    
    subs[sub] = what

    s = ""
    for x, hw in subs.items():
        s += "{0} {1} \n".format(x, hw) 

    with open('Hw.txt', 'w') as obj:
        obj.write(s)

    return '–í—Å—ë –æ–∫!!!'

def prnt(sub):
    return subs[sub]

def conc(X):
    s = ""
    for x in X:
        s+=x + ' '
    return s

def check(X, liss):
    for l in liss:
        if l[:len(X)].lower() == X:
            return l
    return 0

def send_nudes(id):
    vk.method("messages.send", {"peer_id": id, "message": "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:", "attachment": "photo-198555383_457239021", "random_id": 0})


subs = dict()

with open('Hw.txt', 'r') as obj:
    lines = obj.readlines()
    for line in lines:
        message = line.split()
        subs[message[0]] = conc(message[1:])

vk = vk_api.VkApi(token=token)
vk._auth_token()

all_hw = ['–ê–ª–≥–µ–±—Ä–∞',
          '–†—É—Å—Å–∫–∏–π',
          '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π',
          '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞',
          '–ò—Å—Ç–æ—Ä–∏—è',
          '–§–∏–∑–∏–∫–∞',
          '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è',
          '–ì–µ–æ–º–µ—Ç—Ä–∏—è',
          '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞',
          '–ú–∏—Ö–∞–ª—ã—á']

while True:

    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')

    messages = vk.method("messages.getConversations", {"offset": 0, "count": 20, "filter": "unanswered"})

    if messages["count"] >= 1:
        id = messages["items"][0]["last_message"]["from_id"]
        body = messages["items"][0]["last_message"]["text"]

        print(body.lower())
        message = str(body.lower()).strip()

        try:
            if message == 'off':
                say(id, '–ë–ª—è?')
                break
            elif message == 's':
                s = ""
                for w in all_hw:
                    s += "‚ö† " + w + '\n'
                say(id, s)
            elif message == 'r':
                send_nudes(id)
            elif message == '/h':
                say(id, '‚úÖ –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–æ–≤–æ–π –¥–æ–º–∞—à–∫–∏ –ø–∏—à–∏ -> \n a {–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞} {–¥–æ–º–∞—à–∫–∞} \n –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–∞ –µ—Å–ª–∏ –ª–µ–Ω—å\n\n\n' +
                        '‚úÖ –î–ª—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π –ø–∏—à–∏ -> \n d\n\n\n'+
                        '‚úÖ –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–ª–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–∏—à–∏ -> \n c {–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞} \n –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–∞ –µ—Å–ª–∏ –ª–µ–Ω—å\n\n\n'  +
                        '‚úÖ –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–∏—à–∏ -> \n s \n\n\n' + 
                        '‚úÖ –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∏—à–∏  -> \n r \n\n\n')

            elif message[0] == 'a':
                
                message = message.split()

                if not check(message[1], all_hw):
                    say(id, '–û–π —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç—Éüò≥')
                    continue

                say(id, add(check(message[1], all_hw), conc(message[2:])))

            elif message[0] == 'c':


                message = message.split()

                if not check(message[1], all_hw):
                    say(id, '–û–π —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç—Éüò≥')
                    continue

                say(id, prnt(check(message[1], all_hw)))

            elif message == 'd':
                s = ""
                for x, hw in subs.items():
                    s += "‚ö† {0} -> {1} \n\n\n".format(x, hw)
                say(id, s)

            else:

                s = (['–ü–æ—Ö–æ–∂–µ —É –≤–∞—Å 14 IQ üò≥\n\n','–û–π, —É –≤–∞—Å —Ö—Ä–æ–º–æ—Å–æ–º–∞ –≤—ã–ø–∞–ª–∞ üò≥\n\n'][random.randint(0,1)])
                s += '–î–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–º–∞–Ω–¥ –Ω–∞–ø–∏—à–∏ /h'
                say(id, s)
                

        except Exception as obj:
            print(obj)
            say(id, '–¢–≤–æ–∏ —à–∞–ª–æ–≤–ª–∏–≤—ã–µ —Ä—É—á–∫–∏ –ø—Ä–∏–≤–µ–ª–∏ –∫ –æ—à–∏–±–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã')




            

            
        


